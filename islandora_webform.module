<?php

/**
 * @file
 * Implements hooks and theme preprocess functions for this module.
 */

/** Internal predicates used to mark objects created by a Webform
*/
define('ISLANDORA_WEBFORM_ISIW_PREDICATE', 'isIWContributed');
define('ISLANDORA_WEBFORM_HASIW_PREDICATE', 'hasIW');

/**
 * Hook implementations...
 */

/**
 * Implements hook_menu().
 */
function islandora_webform_menu() {
  $items['admin/islandora/configure/iw'] = array(
    'title'            => 'Islandora Webform',
    'description'      => 'Configuration page for Islandora Webform module',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('islandora_webform_admin'),
    'file'             => 'includes/admin.form.inc',
    'access arguments' => array('administer site configuration'),
    'type'             => MENU_NORMAL_ITEM,
    'weight'           => -1,
  );

  $items['node/%webform_menu/webform/islandora'] = array(
    'title'            => 'Islandora settings',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('islandora_webform_configure_stepped_form', 1),
    'access callback'  => 'node_access',
    'access arguments' => array('update', 1),
    'file'             => 'includes/webform.configure.inc',
    'weight'           => 5,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['islandora/object/%islandora_object/submissions'] = array(
    'title'            => 'Submissions',
    'page callback'    => 'islandora_webform_results_object_submissions_page',
    'page arguments'   => array(2),
    'access callback'  => 'islandora_webform_object_results_access',
    'access arguments' => array(2),
    'file'             => 'includes/islandora_webform.report.inc',
    'weight'           => 4,
    'type'             => MENU_LOCAL_TASK,
  );

  $items['islandora_webform/%/tag_object/%/nojs'] = array(
    'page callback'    => 'islandora_webform_action_tag_object',
    'page arguments'   => array(1, 3, 4),
    'access callback'  => '_islandora_webform_user_access_or',
    'access arguments' => array(
      'manage islandora webform',
      'islandora webform link objects',
    ),
    'type'             => MENU_CALLBACK,
    'file'             => 'tag_object.inc',
    'file path'        => drupal_get_path('module', 'islandora_webform') . '/includes',
  );
  $items['islandora_webform/%/tag_object/%/ajax'] = array(
      'delivery callback' => 'ajax_deliver',
    )
    + $items['islandora_webform/%/tag_object/%/nojs'];

  $items['islandora_webform/%/untag_object/%/nojs'] = array(
    'page callback'    => 'islandora_webform_action_untag_object',
    'page arguments'   => array(1, 3, 4),
    'access callback'  => '_islandora_webform_user_access_or',
    'access arguments' => array(
      'manage islandora webform',
      'islandora webform link objects'
    ),
    'type'             => MENU_CALLBACK,
    'file'             => 'tag_object.inc',
    'file path'        => drupal_get_path('module', 'islandora_webform') . '/includes',
  );

  $items['islandora_webform/%/untag_object/%/ajax'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['islandora_webform/%/untag_object/%/nojs'];


  $items['islandora_webform/retrieve_form/%node/nojs'] = array(
    'page callback' => '_iw_inline_webform',
    'page arguments'   => array(2,3),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'file'             => 'inline_webform.inc',
    'file path'        => drupal_get_path('module', 'islandora_webform') . '/includes',
  );

  $items['islandora_webform/retrieve_form/%node/ajax'] = array(
     'delivery callback' => 'ajax_deliver',  
  )+ $items['islandora_webform/retrieve_form/%node/nojs'];

  return $items;
}

/**
 * Implements hook_permission().
 */
function islandora_webform_permission() {
  return array(
    'manage islandora webform'       => array(
      'title'       => t('Manage Islandora Webforms'),
      'description' => t('Manage islandora settings on webforms.'),
    ),
    'islandora webform link objects' => array(
      'title'       => t('Link islandora objects to webforms'),
      'description' => t('Permission to link individual islandora objects to webforms'),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function islandora_webform_theme() {
  return array(
    'islandora_webform_links' => array(
      'file'      => 'theme.inc',
      'path'      => drupal_get_path('module', 'islandora_webform') . '/theme',
      'variables' => array(
        'webform_data'     => NULL,
        'islandora_object' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function islandora_webform_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']->type) && $form['#node']->type == 'webform' && !empty($form['submitted']['islandora_object_pid'])) {
    $args = drupal_get_query_parameters();
    if (!empty($args['pid'])) {
      $object = islandora_object_load($args['pid']);
      $form['submitted']['#prefix'] = '<h2 class="object-label">In regards to: <em>' . $object->label . '</em></h2>';
      $form['submitted']['islandora_object_pid']['#default_value'] = $args['pid'];
      if (!user_access('manage islandora webform')) {
        $form['submitted']['islandora_object_pid']['#type'] = 'hidden';
        $form['submitted']['islandora_object_pid']['#title_display'] = 'invisible';
      }
    }
  }
}
/**
 * Implements hook_module_implements_alter().
 *
 * Let's make sure our form alters are called at the end of all.
 * So we can be sure webform_ajax already has done it's own alters.
 */
function islandora_webform_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter') {
    $group = $implementations['islandora_webform'];
    unset($implementations['islandora_webform']);
    $implementations['islandora_webform'] = $group;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = webform_configure_form.
 * Adds a custom message if the form is configured to be "islandora"
 */
function islandora_webform_form_webform_configure_form_alter(&$form, &$form_state) {
  module_load_include('inc', 'islandora_webform', 'includes/utilities');
  $node = $form_state['build_info']['args'][0];
  if ((isset($form['webform_ajax_fieldset'])) && count(iw_node_islandora_webform($node))>0) {
    $form['webform_ajax_fieldset']['#title']= t('Inline Islandora Webform');
    $form['webform_ajax_fieldset']['webform_ajax']['#title'] =  t('Inline AJAX mode');
    $form['webform_ajax_fieldset']['webform_ajax']['#description'] = t('When set, all page changes (from pagebreak component), and Islandora webform submissions will be achieved inline using AJAX.');
  }
}



/**
 * Implements hook_form_FORM_ID_alter().
 *
 * FORM_ID = webform_client_form.
 * Removes pre_render functionality added by webform. Sorry, we need the element id for ajax
 */
function islandora_webform_form_webform_client_form_alter(&$form, &$form_state, $form_id) {
  $webform = $form['#node']->webform;
  if (module_exists('webform_ajax') && $webform['webform_ajax'] != WEBFORM_AJAX_NO_AJAX) {
    foreach (array('previous', 'next', 'submit', 'draft') as $button) {
      if (isset($form['actions'][$button])) {
        unset($form['actions'][$button]['#pre_render']);
      }
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function islandora_webform_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'islandora_webform');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}


/**
 * Implements hook_node_access().
 *
 * Do not allow users to view an islandora webform without the object's PID
 * being predefined.
 * Exception if user has 'manage islandora webform' permissions.
 */
function islandora_webform_node_access($node, $op, $account) {
  if ($op == 'view' && isset($node->type) && $node->type == 'webform' && isset($node->webform['components']) && !user_access('manage islandora webform', $account)) {
    $is_islandora_webform = FALSE;
    foreach ($node->webform['components'] as $component) {
      if ($component['form_key'] == 'islandora_object_pid') {
        $is_islandora_webform = TRUE;
        break;
      }
    }
    if ($is_islandora_webform) {
      $args = drupal_get_query_parameters();
      if (!isset($args['pid'])) {
        drupal_set_message(t('No fedora object PID was defined'), 'error');
        return NODE_ACCESS_DENY;
      }
    }
  }
  return NODE_ACCESS_IGNORE;
}


/**
 * Implements hook_islandora_view_object_alter().
 *
 * Adds webform links to islandora object pages
 */
function islandora_webform_islandora_view_object_alter(&$object, &$rendered) {

  module_load_include('inc', 'islandora_webform', 'includes/utilities');
  $webforms = islandora_webform_object_get_webforms($object);

  if (!empty($webforms)) {
    $rendered += array(
      'webform_links' => theme('islandora_webform_links', array(
        'webform_data' => $webforms,
        'islandora_object' => $object,
        )
      ),
    );
  }

}

/**
 * Implements hook_islandora_object_purged().
 *
 * Clean up dangling references to deleted PIDs
 */
function islandora_webform_islandora_object_purged($pid) {
  // NOTE: We are going to leave webform submissions referring to this PID
  // undisturbed.

  // If the deleted object is a content model, find any webform configurations
  // which have selected that content model as a filter and reset to none.
  db_update('islandora_webform_webforms')
    ->fields(array('cmodel_filter' => ''))
    ->condition('cmodel_filter', $pid);

  // If the deleted object is a collection, find any webform configurations
  // which have selected that collection as a filter and reset to none.
  db_update('islandora_webform_webforms')
    ->fields(array('collection_filter' => ''))
    ->condition('collection_filter', $pid);
}

/**
 * Utility functions
 */

/**
 * Return user access = TRUE if user access for any listed permission is true.
 *
 * @param array|string $permissions
 *   array of permission strings
 *
 * @return bool
 *   TRUE if user access granted
 *   FALSE if user access denied
 */
function _islandora_webform_user_access_or($permissions) {
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  $permissions = (array) $permissions;
  foreach ($permissions as $permission) {
    if (user_access($permission)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Access callback for viewing the submissions tab for a given object.
 *
 * We hide the tab if there are no submissions. This makes more sense than
 * showing the tab for all objects that could in theory have a submission.
 *
 * @param AbstractObject $object
 *   The fedora object
 *
 * @return bool
 *   TRUE = has access
 */
function islandora_webform_object_results_access(AbstractObject $object) {

  // Check if user has permissions.
  if (user_access('access all webform results')) {

    // If so, then if the count of webform submissions associated with this object
    // is greater than zero, then grant access.
    $query = db_select('webform_submissions', 's');
    $query->join('webform_component', 'c', "c.nid = s.nid and c.form_key = 'islandora_object_pid'");
    $query->join('webform_submitted_data', 'd', "d.sid = s.sid and d.cid = c.cid");
    $query->condition('d.data', $object->id);
    return $query->countQuery()->execute()->fetchField() > 0 ? TRUE : FALSE;
  }
  return FALSE;
}

/**
 * Fetch an array of metadata objects for a given fedora object.
 *
 * @param string $pid
 *   The PID for the object
 * @param string $fields
 *   Comma-separated list of SOLR indexed fields.
 * @param null $filter
 *   Filter string, optional.
 *
 * @return array
 *   The
 */
function iw_get_solr_data_array($pid, $fields = '', $filter = NULL) {

  if (!empty($fields)) {
    $qp = new IslandoraSolrQueryProcessor();
    $query = 'PID:"' . $pid . '"';
    $qp->buildQuery($query);
    $qp->solrParams['fl'] = 'PID, ' . $fields;

    if ($filter) {
      $qp->solrParams['fq'] = $filter;
    }
    $qp->executeQuery();

    if (!empty($qp->islandoraSolrResult['response']['numFound'])) {
      return $qp->islandoraSolrResult['response']['objects'];
    }
  }
  return array();
}


/**
 * Implements hook_webform_submission_render_alter().
 */
function islandora_webform_webform_submission_render_alter(&$renderable) {
  if (!empty($renderable['islandora_object_pid']['#value'])) {
    $renderable['islandora_object_pid']['#value'] = l($renderable['islandora_object_pid']['#value'], '/islandora/object/' . $renderable['islandora_object_pid']['#value']);
    $renderable['islandora_object_pid']['#theme'] = 'webform_display_markup';
  }
}